TODO 

DONE * create db tables for goals
DONE * refactor "loginsignup.js" using 'async.waterfall()'
DONE * finish "joins.js" array of db join relationships
DONE * add ability to send emails from the API
DONE * create function that takes the user file, and type of model (public|private), and filters so only authenticated user's data is returned
DONE * finish the search.js functionality

* figure out how to jump a couple of functions ahead if someone sends a query join with no fields defined in POST (just bring back all joined records belonging to user_id)

* finish the core POST, PUT, DELETE in "alldbtables.js" file

* figure out how the care team invitation process works through the API

	- add new care_team member from user's posted form, send invite email (custom model)
	- when user hits invitation link, need form and a custom model



FUTURE

* create an Admin endpoint (like I did for '/dev') which allows Kurbi admins to edit certain data, particularly lookup lists (symptoms, exercises, medications, etc); create separate token for them

* combine validModels and joins objects into a modelDefinitions object??? it might be really hard to read if they get combined...hmmm
	- divide it into 'db' and 'custom'?

* turn the authentication passport function that's in each route into a helper function that's defined in v1routes.js (et al) to modularize the authentication to make it easier to make changes

* ditto for db error calls, turn into a function that returns: queryString, line/file it happened, db error string

* come up with some wrapper function for mysql queries (connection.query)so i can build in some functionality
	- add in options autoatmically if there is a join: options = {sql: queryString, nestTables: '-'};

* implement override joins in query.js (currently commented out)

* add ability to ask for last N or first N records from a model (table) in the "alldbtables.js" GET
	- Ex. /v1/symptoms/last/15